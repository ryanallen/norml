/**
 * Ignore files adapter
 * Manages .gitignore and .gcloudignore configurations
 */

import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.resolve(__dirname, '../../');
const gitignorePath = path.join(rootDir, '.gitignore');
const gcloudignorePath = path.join(rootDir, '.gcloudignore');

/**
 * .gitignore configuration content
 */
export const gitignoreContent = `# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is automatically generated at runtime.
# To modify .gitignore, edit adapters/env/ignore-files.js instead.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Environment variables
adapters/env/secrets.json

# Node.js dependencies
node_modules/`;

/**
 * .gcloudignore configuration content
 */
export const gcloudignoreContent = `# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is automatically generated at runtime.
# To modify .gcloudignore, edit adapters/env/ignore-files.js instead.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# This file specifies files that are *not* uploaded to Google Cloud Platform
# using gcloud. It follows the same syntax as .gitignore, with the addition of
# "#!include" directives (which insert the entries of the given .gitignore-style
# file at that point).
#
# For more information, run:
#   $ gcloud topic gcloudignore
#
.git
.gitignore
.env
adapters/env/secrets.json
adapters/env/secrets.json.example

# Dependencies
node_modules/

# Tests
**/*test.js
tests/
test-*/
coverage/

# CI/CD
.github/

# Local development
*.sublime-project
*.sublime-workspace
.vscode/
.idea/
*.iml
*.swp
.DS_Store`;

/**
 * Writes the .gitignore file to the root directory
 */
export function writeGitignore() {
  try {
    fs.writeFileSync(gitignorePath, gitignoreContent, 'utf8');
    return true;
  } catch (error) {
    console.error('[IgnoreFiles] Error writing .gitignore:', error);
    return false;
  }
}

/**
 * Writes the .gcloudignore file to the root directory
 */
export function writeGcloudignore() {
  try {
    fs.writeFileSync(gcloudignorePath, gcloudignoreContent, 'utf8');
    return true;
  } catch (error) {
    console.error('[IgnoreFiles] Error writing .gcloudignore:', error);
    return false;
  }
}

/**
 * Reads the current .gitignore file from the root directory
 */
export function readGitignore() {
  try {
    return fs.readFileSync(gitignorePath, 'utf8');
  } catch (error) {
    return null;
  }
}

/**
 * Reads the current .gcloudignore file from the root directory
 */
export function readGcloudignore() {
  try {
    return fs.readFileSync(gcloudignorePath, 'utf8');
  } catch (error) {
    return null;
  }
}

/**
 * Ignore files adapter exports
 */
export const ignoreFiles = {
  writeGitignore,
  writeGcloudignore,
  readGitignore,
  readGcloudignore,
  gitignoreContent,
  gcloudignoreContent
}; 