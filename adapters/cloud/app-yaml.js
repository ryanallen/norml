/**
 * Google Cloud Platform App Engine configuration adapter
 * Manages app.yaml content and configuration for deployment
 */

import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.resolve(__dirname, '../../');
const appYamlPath = path.join(rootDir, 'app.yaml');

/**
 * App YAML configuration content
 */
export const appYamlContent = `# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is automatically generated at runtime.
# To modify app.yaml configuration, edit adapters/cloud/app-yaml.js instead.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

runtime: nodejs20

instance_class: F2

automatic_scaling:
  max_instances: 20

handlers:
  - url: /.*
    script: auto
    secure: always
    http_headers:
      X-Content-Type-Options: "nosniff"
      X-Frame-Options: "SAMEORIGIN"
      Cache-Control: "no-store, must-revalidate"
      # CORS headers are dynamically set per request - these are fallbacks
      # The actual Access-Control-Allow-Origin will be set in the server code
      Access-Control-Allow-Methods: "GET, POST, OPTIONS"
      Access-Control-Allow-Headers: "Content-Type, Origin"
      Access-Control-Expose-Headers: "Content-Length, Content-Type"

# Environment variables should be set using Secret Manager
# DO NOT include secrets directly in this file 
`;

/**
 * App YAML manager
 */
export class AppYamlAdapter {
  constructor() {
    this.content = appYamlContent;
  }
  
  /**
   * Write configuration to app.yaml
   * @returns {boolean} Whether the write was successful
   */
  write() {
    try {
      fs.writeFileSync(appYamlPath, appYamlContent, 'utf8');
      console.log('[GCP Adapter] App YAML configuration written successfully');
      return true;
    } catch (error) {
      console.error('[GCP Adapter] Failed to write App YAML:', error);
      return false;
    }
  }
  
  /**
   * Read current app.yaml configuration
   * @returns {string|null} The YAML content or null on error
   */
  read() {
    try {
      if (fs.existsSync(appYamlPath)) {
        return fs.readFileSync(appYamlPath, 'utf8');
      }
      return null;
    } catch (error) {
      console.error('[GCP Adapter] Failed to read App YAML:', error);
      return null;
    }
  }
}

// Export a singleton instance
export const appYaml = new AppYamlAdapter(); 